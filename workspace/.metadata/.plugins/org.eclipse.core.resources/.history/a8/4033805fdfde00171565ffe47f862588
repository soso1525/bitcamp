package step8;

import java.io.File;
import java.io.IOException;
import java.io.PrintWriter;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.servlet.ServletContext;
import javax.servlet.ServletException;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.commons.fileupload.FileItem;
import org.apache.commons.fileupload.FileUploadException;
import org.apache.commons.fileupload.disk.DiskFileItemFactory;
import org.apache.commons.fileupload.servlet.ServletFileUpload;

@SuppressWarnings("serial")
@WebServlet("/step8/Servlet11")
public class Servlet11 extends HttpServlet {
    @Override
    protected void doPost(HttpServletRequest req, HttpServletResponse res) throws ServletException, IOException {

        String name = null;
        String age = null;
        String photo1Filename = null;
        String photo2Filename = null;

        /* 멀티파트로 전송된 데이터를 분석하는 코드를 작성하라 */

        DiskFileItemFactory factory = new DiskFileItemFactory();
        ServletFileUpload upload = new ServletFileUpload(factory);

        Map<String, FileItem> itemMap = new HashMap<>();

        try {
            List<FileItem> items = upload.parseRequest(req);
            for (FileItem item : items) {
                itemMap.put(item.getFieldName(), item);
            }
        } catch (FileUploadException e) {
            throw new ServletException(e);
        }

        name = itemMap.get("name").getString("UTF-8");
        age = itemMap.get("age").getString("UTF-8");
        photo1Filename = itemMap.get("photo1").getName();
        photo2Filename = itemMap.get("photo2").getName();

        ServletContext context = this.getServletContext();
        String path = context.getRealPath("/step8");

        FileItem fileItem = itemMap.get("photo1");
        String filename = getNewFilename(fileItem.getName());
        File file = new File(path + "/" + filename);
        fileItem.write(file);

        fileItem = itemMap.get("photo1");
        filename = getNewFilename(fileItem.getName());
        file = new File(path + "/" + filename);
        fileItem.write(file);

        req.setCharacterEncoding("UTF-8");
        res.setContentType("text/plain;charset=UTF-8");
        PrintWriter out = res.getWriter();

        out.printf("이름 : %s\n", name);
        out.printf("나이 : %s\n", age);
        out.printf("사진1 : %s\n", photo1Filename);
        out.printf("사진2 : %s\n", photo2Filename);
    }

    int count = 0;
    long prevMillis = 0;

    synchronized private String getNewFilename(String filename) {
        long currMillis = System.currentTimeMillis();
        if (prevMillis != currMillis)
            count = 0;

        return currMillis + "_" + count++ + extractFileExtName(filename);
    }

    private String extractFileExtName(String filename) {
        int dotPosition = filename.lastIndexOf(".");
        if (dotPosition == -1)
            return "";
        return filename.substring(dotPosition);
    }
}
